/******************************************************************************\
FILE:           task.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Implementation of task: Non-adjacent Dependency Learning (HPP)
See readme.txt for more information.


Global structure of this experiment phase:

  - familiarization part
      trial

  - test part
      trial
        subtrial


HISTORY:
2013-01-11 TV   Created.

\******************************************************************************/

//requires 1.10;

import defs;
import stimuli;
import shuffle;
import output;
import fam_handler;
import test_handler;


// At the UiL-OTS babylab the go button is button number 3, the halt button
// is button number 4.
const int   BUTTON_BOX_GO_BUTTON    = 3;
const int   BUTTON_BOX_HALT_BUTTON  = 4;


Block task
{
    on_event:entry()
    {
        control.button_box.open();

        control.target = this;
        control.enable_key(KEY_Return, CONTINUE);
        control.enable_key(' ', CONTINUE);
        control.button_box.enable_button(BUTTON_BOX_GO_BUTTON, CONTINUE);
    }


    on_event:exit()
    {
        control.button_box.disable_buttons();
    }


    Block familiarization
    {
        TestItem    item;           // current item


        on_event:entry()
        {
            // Setup familiarization items table.
            if (setup_fam_items() != OK) terminate;
//            dump_fam_items();

            num_cycles = fam_items.size;

            fam_handler.setup();
        }


        on_event:exit()
        {
            fam_handler.cleanup(event_time);

            // Add new row to output table.
            FamOutput output;
            output.lt = int(control.clock.duration);
            output.nlt = 
                int(control.clock.total_runtime - control.clock.duration);
            output.lookaways = (control.clock.timestamps.size - 1) / 2;
            fam_output_append(output);

            // Save familiarization output table as CSV file.
            fam_output_save();

            // Save familiarization timestamps table as CSV file.
            timestamp_output_append(0);
            timestamp_output_save(false);
        }


        Trial trial
        {
            on_event:entry()
            {
                item = fam_items[familiarization.cycle];

                // A familiarization trial is the presentation of one 
                // stimulus. The contingency procedure for the lights 
                // starts at trial 1 and runs independently from the 
                // auditory stimuli.
                fam_handler.action(this, item, reference_time);
            }
        }
    }


    Block test
    {
        on_event:entry()
        {
            // Randomize test list selection table.
            shuffle_test_list_order();

            num_cycles = test_list_order.size;
        }


        on_event:exit()
        {
            // Save test output table as CSV file.
            test_output_save();

            // Save test timestamps table as CSV file.
            timestamp_output_save(true);
        }


        Trial trial
        {
            TestGroup       itemlang;       // current item language
            Condition       condition;      // current condition


            on_event:entry()
            {
                itemlang = test_list_order[test.cycle];
                condition = itemlang == selected_group ? FAMIL : NOVEL;

                // Randomize specified block in test items table.
                shuffle_test_items(itemlang);

                num_cycles = MAX_TEST_SUBTRIALS;

                test_handler.setup();
            }


            on_event:exit()
            {
                test_handler.cleanup(event_time);

                // Add new row to output table.
                TestOutput output;
                output.trialnum = test.cycle + 1;
                output.lang = itemlang;
                output.cond = condition;
                output.lt = int(control.clock.duration);
                output.nlt = 
                    int(control.clock.total_runtime - control.clock.duration);
                output.lookaways = (control.clock.timestamps.size - 1) / 2;
                test_output_append(output);

                // Add array of timestamps to timestamp output table.
                timestamp_output_append(output.trialnum);
            }


            SubTrial subtrial
            {
                TestItem    item;           // current item


                on_event:entry()
                {
                    int itemnum = trial.cycle % test_items[itemlang].size;
                    item = test_items[itemlang][itemnum];

                    test_handler.action(this, item, reference_time);
                }


                on_event:message()
                {
                    if (message_arg == TIMEOUT)
                        trial.leave();
                    else
                        leave();
                }
            }
        }
    }
}


void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task.enter(caller);
}

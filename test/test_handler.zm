/******************************************************************************\
FILE:           test_handler.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Provides a state machine to handle the head-turn procedure contingency for
both the lights and auditory stimuli. It controls the lights through the 
experiment control page.


HISTORY:
2013-01-11 TV   Created.

\******************************************************************************/

import std_sound_output_device;


State test_handler
{
    TestItem    item;           // trial control parameters

    Direction   lightpos;       // which side light is presented
    int         samesidecount;  // left-right count
    bool        running;        // set at first 'looking' for first trial


    init()
    {
        lightpos = FRONT_SIDE;
    }


    on_event:exit()
    {
        lookaway.abort();

        control.stop_light(FRONT_SIDE | LEFT_SIDE | RIGHT_SIDE);
        control.hide_speaker_icon(FRONT_SIDE | LEFT_SIDE | RIGHT_SIDE);
        control.erase_clock();
    }


    State idle
    {
        on_event:entry()
        {
            control.stop_light(FRONT_SIDE | LEFT_SIDE | RIGHT_SIDE);
        }


        on_event:message()
        {
            if (message_arg == GREEN_BUTTON)
                front.enter();
        }
    }


    State front
    {
        on_event:entry()
        {
            control.start_light(FRONT_SIDE);

            // Only reset the clock at the first trial.
            if (!running) control.begin_clock();
        }


        on_event:message()
        {
            if (message_arg == GREEN_BUTTON)
                side.enter();
        }
    }


    State side
    {
        on_event:entry()
        {
            if (random(1000) >= 500)
            {
                if (lightpos == LEFT_SIDE)
                    samesidecount++;
                else
                    samesidecount = 1;
                lightpos = LEFT_SIDE;
                if (samesidecount > MAX_SAME_SIDE)
                {
                    samesidecount = 1;
                    lightpos = RIGHT_SIDE;
                }
            }
            else
            {
                if (lightpos == RIGHT_SIDE)
                    samesidecount++;
                else
                    samesidecount = 1;
                lightpos = RIGHT_SIDE;
                if (samesidecount > MAX_SAME_SIDE)
                {
                    samesidecount = 1;
                    lightpos = LEFT_SIDE;
                }
            }

            control.stop_light(FRONT_SIDE);
            control.start_light(lightpos);
        }


        on_event:message()
        {
            if (message_arg == GREEN_BUTTON)
            {
                // Infant is looking; if this is the first trial then we 
                // become 'running' and the first auditory stimulus will be 
                // started.
                if (!running)
                {
                    running = true;
                    audio.play(event_time + 100ms);
                }

                looking.enter();
            }
        }
    }


    State looking
    {
        on_event:entry()
        {
            control.start_clock(event_time);
        }


        on_event:exit()
        {
            control.stop_clock(event_time);
        }


        on_event:message()
        {
            if (message_arg == RED_BUTTON)
                not_looking.enter();
            else if (message_arg == AUDIO_START)
                control.release_clock(event_time);
        }
    }


    State not_looking
    {
        on_event:entry()
        {
            if (control.clock.released)
                lookaway.start(event_time + MAX_LOOKAWAY_DURATION);
        }


        on_event:exit()
        {
            lookaway.abort();
        }


        on_event:message()
        {
            if (message_arg == GREEN_BUTTON)
                looking.enter();
            else if (message_arg == AUDIO_START)
                control.release_clock(event_time);
        }
    }


    Timer lookaway
    {
        on_event:expire()
        {
            done(TIMEOUT);
        }
    }


    SoundChain audio
    {
        // Sound source/producer object.
        SoundFile clip {}


        // Sound sink/consumer object.
        SoundPlayback playback {}


        on_event:start()
        {
            signal(test_handler, AUDIO_START);
            control.show_speaker_icon(lightpos);
        }


        on_event:finish()
        {
            control.hide_speaker_icon(FRONT_SIDE | LEFT_SIDE | RIGHT_SIDE);
            control.update_clock(event_time);
            done(CONTINUE);
        }


        void play(time tstart)
        {
            abort();

            playback.device = sound_output_device;
            clip.file = stimuli_dir() + "sounds/" + item.sndfn;
            if (lightpos == LEFT_SIDE)
            {
                playback.set_scaling(0, 1.0);
                playback.set_scaling(1, 0.0);
            }
            else if (lightpos == RIGHT_SIDE)
            {
                playback.set_scaling(0, 0.0);
                playback.set_scaling(1, 1.0);
            }
            else
                playback.set_scaling(1.0);

            start(tstart);
        }
    }


    // Signals the initiator of the trial that we're done.
    void done(int msgid)
    {
        signal_target(msgid);   // tell caller we're done
        target = null;

        control.clear_status();
    }


    //==========================================================================


    // Performs preparatory work required before using this page.
    void setup()
    {
        // Let control page send us the GREEN_BUTTON message when button-box
        // button 0 is hit and the RED_BUTTON message for button 1. Keyboard
        // keys Enter and Escape will serve as fallback green/red buttons.
        control.target = this;
        control.button_box.disable_buttons();
        control.button_box.enable_button(BUTTON_BOX_GO_BUTTON, GREEN_BUTTON);
        control.button_box.enable_button(BUTTON_BOX_HALT_BUTTON, RED_BUTTON);
        control.disable_keys();
        control.enable_key(KEY_Return, GREEN_BUTTON);
        control.enable_key(KEY_Escape, RED_BUTTON);

        control.reset_clock();
        enter();
    }


    // Performs cleaning up if necessary.
    void cleanup(time t)
    {
        running = false;

        control.end_clock(t);
        audio.abort();

        control.button_box.disable_buttons();
        control.disable_keys();
        control.target = null;

        leave();
    }


    void action(Object caller, TestItem it, time tref)
    {
        // Save the passed trial control parameters.
        item = it;


        // The first subtrial (audio stimulus played) will be started at 
        // first looking at the target side light. Then we become 'running'.
        // See state machine above. All subsequent subtrials are ITI apart.
        if (running) audio.play(tref + INTERSTIMULUS_INTERVAL);


        // Update status line on control window. Cleared in done() above.
        control.set_status(
            string(item.id) + "  " + 
            string(item.type) + "  " + 
            item.sndfn);


        // Remember who to signal when the trial is over.
        target = caller;
    }
}
